{"version":3,"sources":["../vendor/lz-string/libs/lz-string.js"],"names":["LZString","getBaseValue","alphabet","character","baseReverseDic","i","length","charAt","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","undefined","decompress","Array","result","forEach","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","next","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","position","define","amd","module","exports","angular","factory","global","definition","path","iterate","isObject","isTypeOf","isEnabled","pointer","match","pattern","indexOf","weight","state","storage","demand","on","options","key","dependency","id","source","provide","this"],"mappings":"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","file":"lzstring.js","sourcesContent":["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n"]}