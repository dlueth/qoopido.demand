{"version":3,"sources":["plugin/sri.js"],"names":["SUPPORTED_ALGS","global","K_sha2","K_sha512","r_sha3","rc_sha3","TWO_PWR_32","Int_64","msint_32","lsint_32","this","highOrder","lowOrder","packed2hex","packed","outputLength","bigEndianMod","formatOpts","i","srcByte","shiftModifier","hex_tab","str","length","charAt","toUpperCase","packed2b64","j","triplet","int1","int2","packed2bytes","String","fromCharCode","packed2arraybuffer","arrView","retVal","ArrayBuffer","Uint8Array","getOutputOpts","options","outputOptions","outputUpper","b64Pad","shakeLen","hasOwnProperty","Error","getStrConverter","format","utfType","existingBin","existingBinLen","existingPacked","existingPackedLen","num","intOffset","byteOffset","existingByteLen","parseInt","substr","isNaN","push","value","binLen","hex2packed","codePnt","codePntArr","transposeBytes","byteCnt","charCodeAt","str2packed","tmpInt","strPart","firstEqual","search","indexOf","replace","b642packed","bytes2packed","ignore","arr","byteLength","arraybuffer2packed","rotl_32","x","n","rotl_64","rotr_32","rotr_64","tmp","shr_32","shr_64","parity_32","y","z","ch_32","ch_64","maj_32","maj_64","sigma0_32","sigma0_64","rotr28","rotr34","rotr39","sigma1_32","sigma1_64","rotr14","rotr18","rotr41","gamma0_32","gamma0_64","rotr1","rotr8","shr7","gamma1_32","gamma1_64","rotr19","rotr61","shr6","safeAdd_32_2","a","b","lsw","safeAdd_32_4","c","d","safeAdd_32_5","e","safeAdd_64_2","msw","safeAdd_64_4","safeAdd_64_5","xor_64_2","getNewState","variant","H_trunc","H_full","lastIndexOf","roundSHA1","block","H","T","t","W","ch","parity","maj","rotl","safeAdd_2","safeAdd_5","finalizeSHA1","remainder","remainderBinLen","processedBinLen","outputLen","appendedMessageLength","offset","totalLen","slice","roundSHA2","f","g","h","T1","T2","numRounds","binaryStringMult","safeAdd_4","gamma0","gamma1","sigma0","sigma1","Int","K","Number","roundSHA3","state","round","B","C","D","jsSHA","inputFormat","intermediateState","converterFunc","outputBinLen","variantBlockSize","roundFunc","finalizeFunc","stateCloneFunc","inputOptions","processedLen","remainderLen","shaVariant","hmacKeySet","keyWithIPad","keyWithOPad","updatedCalled","isSHAKE","binaryStringInc","finalizeSHA2","delimiter","clone","cloneSHA3State","blockSize","temp","state_offset","remainderIntLen","finalizeSHA3","setHMACKey","key","convertRet","keyBinLen","keyToUse","blockByteSize","lastArrayIndex","keyConverterFunc","update","srcString","chunkBinLen","chunkIntLen","chunk","updateProcessedLen","variantBlockIntInc","getHash","formatFunc","finalizedState","binarray","getHMAC","firstHash","define","exports","module","provide","path","Failure","iterate","isObject","settings","demand","on","dependency","sha","hash","match","type","source","dfd","reject","id","error"],"mappings":"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","file":"sri.js","sourcesContent":["var SUPPORTED_ALGS = 8 | 4 | 2 | 1;\n(function(global) {\n    \"use strict\";\n    var TWO_PWR_32 = 4294967296;\n\n    function Int_64(msint_32, lsint_32) {\n        this.highOrder = msint_32;\n        this.lowOrder = lsint_32\n    }\n\n    function str2packed(str, utfType, existingPacked, existingPackedLen, bigEndianMod) {\n        var packed, codePnt, codePntArr, byteCnt = 0,\n            i, j, existingByteLen, intOffset, byteOffset, shiftModifier, transposeBytes;\n        packed = existingPacked || [0];\n        existingPackedLen = existingPackedLen || 0;\n        existingByteLen = existingPackedLen >>> 3;\n        if (\"UTF8\" === utfType) {\n            shiftModifier = bigEndianMod === -1 ? 3 : 0;\n            for (i = 0; i < str.length; i += 1) {\n                codePnt = str.charCodeAt(i);\n                codePntArr = [];\n                if (128 > codePnt) {\n                    codePntArr.push(codePnt)\n                } else if (2048 > codePnt) {\n                    codePntArr.push(192 | codePnt >>> 6);\n                    codePntArr.push(128 | codePnt & 63)\n                } else if (55296 > codePnt || 57344 <= codePnt) {\n                    codePntArr.push(224 | codePnt >>> 12, 128 | codePnt >>> 6 & 63, 128 | codePnt & 63)\n                } else {\n                    i += 1;\n                    codePnt = 65536 + ((codePnt & 1023) << 10 | str.charCodeAt(i) & 1023);\n                    codePntArr.push(240 | codePnt >>> 18, 128 | codePnt >>> 12 & 63, 128 | codePnt >>> 6 & 63, 128 | codePnt & 63)\n                }\n                for (j = 0; j < codePntArr.length; j += 1) {\n                    byteOffset = byteCnt + existingByteLen;\n                    intOffset = byteOffset >>> 2;\n                    while (packed.length <= intOffset) {\n                        packed.push(0)\n                    }\n                    packed[intOffset] |= codePntArr[j] << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4));\n                    byteCnt += 1\n                }\n            }\n        } else if (\"UTF16BE\" === utfType || \"UTF16LE\" === utfType) {\n            shiftModifier = bigEndianMod === -1 ? 2 : 0;\n            transposeBytes = \"UTF16LE\" === utfType && bigEndianMod !== 1 || \"UTF16LE\" !== utfType && bigEndianMod === 1;\n            for (i = 0; i < str.length; i += 1) {\n                codePnt = str.charCodeAt(i);\n                if (transposeBytes === true) {\n                    j = codePnt & 255;\n                    codePnt = j << 8 | codePnt >>> 8\n                }\n                byteOffset = byteCnt + existingByteLen;\n                intOffset = byteOffset >>> 2;\n                while (packed.length <= intOffset) {\n                    packed.push(0)\n                }\n                packed[intOffset] |= codePnt << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4));\n                byteCnt += 2\n            }\n        }\n        return {\n            value: packed,\n            binLen: byteCnt * 8 + existingPackedLen\n        }\n    }\n\n    function hex2packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n        var packed, length = str.length,\n            i, num, intOffset, byteOffset, existingByteLen, shiftModifier;\n        if (0 !== length % 2) {\n            throw new Error(\"String of HEX type must be in byte increments\")\n        }\n        packed = existingPacked || [0];\n        existingPackedLen = existingPackedLen || 0;\n        existingByteLen = existingPackedLen >>> 3;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < length; i += 2) {\n            num = parseInt(str.substr(i, 2), 16);\n            if (!isNaN(num)) {\n                byteOffset = (i >>> 1) + existingByteLen;\n                intOffset = byteOffset >>> 2;\n                while (packed.length <= intOffset) {\n                    packed.push(0)\n                }\n                packed[intOffset] |= num << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4))\n            } else {\n                throw new Error(\"String of HEX type contains invalid characters\")\n            }\n        }\n        return {\n            value: packed,\n            binLen: length * 4 + existingPackedLen\n        }\n    }\n\n    function bytes2packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n        var packed, codePnt, i, existingByteLen, intOffset, byteOffset, shiftModifier;\n        packed = existingPacked || [0];\n        existingPackedLen = existingPackedLen || 0;\n        existingByteLen = existingPackedLen >>> 3;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < str.length; i += 1) {\n            codePnt = str.charCodeAt(i);\n            byteOffset = i + existingByteLen;\n            intOffset = byteOffset >>> 2;\n            if (packed.length <= intOffset) {\n                packed.push(0)\n            }\n            packed[intOffset] |= codePnt << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4))\n        }\n        return {\n            value: packed,\n            binLen: str.length * 8 + existingPackedLen\n        }\n    }\n\n    function b642packed(str, existingPacked, existingPackedLen, bigEndianMod) {\n        var packed, byteCnt = 0,\n            index, i, j, tmpInt, strPart, firstEqual, b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n            existingByteLen, intOffset, byteOffset, shiftModifier;\n        if (-1 === str.search(/^[a-zA-Z0-9=+\\/]+$/)) {\n            throw new Error(\"Invalid character in base-64 string\")\n        }\n        firstEqual = str.indexOf(\"=\");\n        str = str.replace(/\\=/g, \"\");\n        if (-1 !== firstEqual && firstEqual < str.length) {\n            throw new Error(\"Invalid '=' found in base-64 string\")\n        }\n        packed = existingPacked || [0];\n        existingPackedLen = existingPackedLen || 0;\n        existingByteLen = existingPackedLen >>> 3;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < str.length; i += 4) {\n            strPart = str.substr(i, 4);\n            tmpInt = 0;\n            for (j = 0; j < strPart.length; j += 1) {\n                index = b64Tab.indexOf(strPart[j]);\n                tmpInt |= index << 18 - 6 * j\n            }\n            for (j = 0; j < strPart.length - 1; j += 1) {\n                byteOffset = byteCnt + existingByteLen;\n                intOffset = byteOffset >>> 2;\n                while (packed.length <= intOffset) {\n                    packed.push(0)\n                }\n                packed[intOffset] |= (tmpInt >>> 16 - j * 8 & 255) << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4));\n                byteCnt += 1\n            }\n        }\n        return {\n            value: packed,\n            binLen: byteCnt * 8 + existingPackedLen\n        }\n    }\n\n    function arraybuffer2packed(arr, existingPacked, existingPackedLen, bigEndianMod) {\n        var packed, i, existingByteLen, intOffset, byteOffset, shiftModifier, arrView;\n        packed = existingPacked || [0];\n        existingPackedLen = existingPackedLen || 0;\n        existingByteLen = existingPackedLen >>> 3;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        arrView = new Uint8Array(arr);\n        for (i = 0; i < arr.byteLength; i += 1) {\n            byteOffset = i + existingByteLen;\n            intOffset = byteOffset >>> 2;\n            if (packed.length <= intOffset) {\n                packed.push(0)\n            }\n            packed[intOffset] |= arrView[i] << 8 * (shiftModifier + bigEndianMod * (byteOffset % 4))\n        }\n        return {\n            value: packed,\n            binLen: arr.byteLength * 8 + existingPackedLen\n        }\n    }\n\n    function packed2hex(packed, outputLength, bigEndianMod, formatOpts) {\n        var hex_tab = \"0123456789abcdef\",\n            str = \"\",\n            length = outputLength / 8,\n            i, srcByte, shiftModifier;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < length; i += 1) {\n            srcByte = packed[i >>> 2] >>> 8 * (shiftModifier + bigEndianMod * (i % 4));\n            str += hex_tab.charAt(srcByte >>> 4 & 15) + hex_tab.charAt(srcByte & 15)\n        }\n        return formatOpts[\"outputUpper\"] ? str.toUpperCase() : str\n    }\n\n    function packed2b64(packed, outputLength, bigEndianMod, formatOpts) {\n        var str = \"\",\n            length = outputLength / 8,\n            i, j, triplet, int1, int2, shiftModifier, b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < length; i += 3) {\n            int1 = i + 1 < length ? packed[i + 1 >>> 2] : 0;\n            int2 = i + 2 < length ? packed[i + 2 >>> 2] : 0;\n            triplet = (packed[i >>> 2] >>> 8 * (shiftModifier + bigEndianMod * (i % 4)) & 255) << 16 | (int1 >>> 8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)) & 255) << 8 | int2 >>> 8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)) & 255;\n            for (j = 0; j < 4; j += 1) {\n                if (i * 8 + j * 6 <= outputLength) {\n                    str += b64Tab.charAt(triplet >>> 6 * (3 - j) & 63)\n                } else {\n                    str += formatOpts[\"b64Pad\"]\n                }\n            }\n        }\n        return str\n    }\n\n    function packed2bytes(packed, outputLength, bigEndianMod) {\n        var str = \"\",\n            length = outputLength / 8,\n            i, srcByte, shiftModifier;\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < length; i += 1) {\n            srcByte = packed[i >>> 2] >>> 8 * (shiftModifier + bigEndianMod * (i % 4)) & 255;\n            str += String.fromCharCode(srcByte)\n        }\n        return str\n    }\n\n    function packed2arraybuffer(packed, outputLength, bigEndianMod) {\n        var length = outputLength / 8,\n            i, retVal = new ArrayBuffer(length),\n            shiftModifier, arrView;\n        arrView = new Uint8Array(retVal);\n        shiftModifier = bigEndianMod === -1 ? 3 : 0;\n        for (i = 0; i < length; i += 1) {\n            arrView[i] = packed[i >>> 2] >>> 8 * (shiftModifier + bigEndianMod * (i % 4)) & 255\n        }\n        return retVal\n    }\n\n    function getOutputOpts(options) {\n        var retVal = {\n                outputUpper: false,\n                b64Pad: \"=\",\n                shakeLen: -1\n            },\n            outputOptions;\n        outputOptions = options || {};\n        retVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;\n        if (true === outputOptions.hasOwnProperty(\"b64Pad\")) {\n            retVal[\"b64Pad\"] = outputOptions[\"b64Pad\"]\n        }\n        if (true === outputOptions.hasOwnProperty(\"shakeLen\") && (8 & SUPPORTED_ALGS) !== 0) {\n            if (outputOptions[\"shakeLen\"] % 8 !== 0) {\n                throw new Error(\"shakeLen must be a multiple of 8\")\n            }\n            retVal[\"shakeLen\"] = outputOptions[\"shakeLen\"]\n        }\n        if (\"boolean\" !== typeof retVal[\"outputUpper\"]) {\n            throw new Error(\"Invalid outputUpper formatting option\")\n        }\n        if (\"string\" !== typeof retVal[\"b64Pad\"]) {\n            throw new Error(\"Invalid b64Pad formatting option\")\n        }\n        return retVal\n    }\n\n    function getStrConverter(format, utfType, bigEndianMod) {\n        var retVal;\n        switch (utfType) {\n            case \"UTF8\":\n            case \"UTF16BE\":\n            case \"UTF16LE\":\n                break;\n            default:\n                throw new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\")\n        }\n        switch (format) {\n            case \"HEX\":\n                retVal = function(str, existingBin, existingBinLen) {\n                    return hex2packed(str, existingBin, existingBinLen, bigEndianMod)\n                };\n                break;\n            case \"TEXT\":\n                retVal = function(str, existingBin, existingBinLen) {\n                    return str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod)\n                };\n                break;\n            case \"B64\":\n                retVal = function(str, existingBin, existingBinLen) {\n                    return b642packed(str, existingBin, existingBinLen, bigEndianMod)\n                };\n                break;\n            case \"BYTES\":\n                retVal = function(str, existingBin, existingBinLen) {\n                    return bytes2packed(str, existingBin, existingBinLen, bigEndianMod)\n                };\n                break;\n            case \"ARRAYBUFFER\":\n                try {\n                    retVal = new ArrayBuffer(0)\n                } catch (ignore) {\n                    throw new Error(\"ARRAYBUFFER not supported by this environment\")\n                }\n                retVal = function(arr, existingBin, existingBinLen) {\n                    return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod)\n                };\n                break;\n            default:\n                throw new Error(\"format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER\")\n        }\n        return retVal\n    }\n\n    function rotl_32(x, n) {\n        return x << n | x >>> 32 - n\n    }\n\n    function rotl_64(x, n) {\n        if (n > 32) {\n            n = n - 32;\n            return new Int_64(x.lowOrder << n | x.highOrder >>> 32 - n, x.highOrder << n | x.lowOrder >>> 32 - n)\n        } else if (0 !== n) {\n            return new Int_64(x.highOrder << n | x.lowOrder >>> 32 - n, x.lowOrder << n | x.highOrder >>> 32 - n)\n        } else {\n            return x\n        }\n    }\n\n    function rotr_32(x, n) {\n        return x >>> n | x << 32 - n\n    }\n\n    function rotr_64(x, n) {\n        var retVal = null,\n            tmp = new Int_64(x.highOrder, x.lowOrder);\n        if (32 >= n) {\n            retVal = new Int_64(tmp.highOrder >>> n | tmp.lowOrder << 32 - n & 4294967295, tmp.lowOrder >>> n | tmp.highOrder << 32 - n & 4294967295)\n        } else {\n            retVal = new Int_64(tmp.lowOrder >>> n - 32 | tmp.highOrder << 64 - n & 4294967295, tmp.highOrder >>> n - 32 | tmp.lowOrder << 64 - n & 4294967295)\n        }\n        return retVal\n    }\n\n    function shr_32(x, n) {\n        return x >>> n\n    }\n\n    function shr_64(x, n) {\n        var retVal = null;\n        if (32 >= n) {\n            retVal = new Int_64(x.highOrder >>> n, x.lowOrder >>> n | x.highOrder << 32 - n & 4294967295)\n        } else {\n            retVal = new Int_64(0, x.highOrder >>> n - 32)\n        }\n        return retVal\n    }\n\n    function parity_32(x, y, z) {\n        return x ^ y ^ z\n    }\n\n    function ch_32(x, y, z) {\n        return x & y ^ ~x & z\n    }\n\n    function ch_64(x, y, z) {\n        return new Int_64(x.highOrder & y.highOrder ^ ~x.highOrder & z.highOrder, x.lowOrder & y.lowOrder ^ ~x.lowOrder & z.lowOrder)\n    }\n\n    function maj_32(x, y, z) {\n        return x & y ^ x & z ^ y & z\n    }\n\n    function maj_64(x, y, z) {\n        return new Int_64(x.highOrder & y.highOrder ^ x.highOrder & z.highOrder ^ y.highOrder & z.highOrder, x.lowOrder & y.lowOrder ^ x.lowOrder & z.lowOrder ^ y.lowOrder & z.lowOrder)\n    }\n\n    function sigma0_32(x) {\n        return rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22)\n    }\n\n    function sigma0_64(x) {\n        var rotr28 = rotr_64(x, 28),\n            rotr34 = rotr_64(x, 34),\n            rotr39 = rotr_64(x, 39);\n        return new Int_64(rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder, rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder)\n    }\n\n    function sigma1_32(x) {\n        return rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25)\n    }\n\n    function sigma1_64(x) {\n        var rotr14 = rotr_64(x, 14),\n            rotr18 = rotr_64(x, 18),\n            rotr41 = rotr_64(x, 41);\n        return new Int_64(rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder, rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder)\n    }\n\n    function gamma0_32(x) {\n        return rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3)\n    }\n\n    function gamma0_64(x) {\n        var rotr1 = rotr_64(x, 1),\n            rotr8 = rotr_64(x, 8),\n            shr7 = shr_64(x, 7);\n        return new Int_64(rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder, rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder)\n    }\n\n    function gamma1_32(x) {\n        return rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10)\n    }\n\n    function gamma1_64(x) {\n        var rotr19 = rotr_64(x, 19),\n            rotr61 = rotr_64(x, 61),\n            shr6 = shr_64(x, 6);\n        return new Int_64(rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder, rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder)\n    }\n\n    function safeAdd_32_2(a, b) {\n        var lsw = (a & 65535) + (b & 65535),\n            msw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);\n        return (msw & 65535) << 16 | lsw & 65535\n    }\n\n    function safeAdd_32_4(a, b, c, d) {\n        var lsw = (a & 65535) + (b & 65535) + (c & 65535) + (d & 65535),\n            msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (lsw >>> 16);\n        return (msw & 65535) << 16 | lsw & 65535\n    }\n\n    function safeAdd_32_5(a, b, c, d, e) {\n        var lsw = (a & 65535) + (b & 65535) + (c & 65535) + (d & 65535) + (e & 65535),\n            msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (e >>> 16) + (lsw >>> 16);\n        return (msw & 65535) << 16 | lsw & 65535\n    }\n\n    function safeAdd_64_2(x, y) {\n        var lsw, msw, lowOrder, highOrder;\n        lsw = (x.lowOrder & 65535) + (y.lowOrder & 65535);\n        msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\n        lowOrder = (msw & 65535) << 16 | lsw & 65535;\n        lsw = (x.highOrder & 65535) + (y.highOrder & 65535) + (msw >>> 16);\n        msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\n        highOrder = (msw & 65535) << 16 | lsw & 65535;\n        return new Int_64(highOrder, lowOrder)\n    }\n\n    function safeAdd_64_4(a, b, c, d) {\n        var lsw, msw, lowOrder, highOrder;\n        lsw = (a.lowOrder & 65535) + (b.lowOrder & 65535) + (c.lowOrder & 65535) + (d.lowOrder & 65535);\n        msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\n        lowOrder = (msw & 65535) << 16 | lsw & 65535;\n        lsw = (a.highOrder & 65535) + (b.highOrder & 65535) + (c.highOrder & 65535) + (d.highOrder & 65535) + (msw >>> 16);\n        msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\n        highOrder = (msw & 65535) << 16 | lsw & 65535;\n        return new Int_64(highOrder, lowOrder)\n    }\n\n    function safeAdd_64_5(a, b, c, d, e) {\n        var lsw, msw, lowOrder, highOrder;\n        lsw = (a.lowOrder & 65535) + (b.lowOrder & 65535) + (c.lowOrder & 65535) + (d.lowOrder & 65535) + (e.lowOrder & 65535);\n        msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);\n        lowOrder = (msw & 65535) << 16 | lsw & 65535;\n        lsw = (a.highOrder & 65535) + (b.highOrder & 65535) + (c.highOrder & 65535) + (d.highOrder & 65535) + (e.highOrder & 65535) + (msw >>> 16);\n        msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);\n        highOrder = (msw & 65535) << 16 | lsw & 65535;\n        return new Int_64(highOrder, lowOrder)\n    }\n\n    function xor_64_2(a, b) {\n        return new Int_64(a.highOrder ^ b.highOrder, a.lowOrder ^ b.lowOrder)\n    }\n\n    function xor_64_5(a, b, c, d, e) {\n        return new Int_64(a.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder, a.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder)\n    }\n\n    function cloneSHA3State(state) {\n        var clone = [],\n            i;\n        for (i = 0; i < 5; i += 1) {\n            clone[i] = state[i].slice()\n        }\n        return clone\n    }\n\n    function getNewState(variant) {\n        var retVal = [],\n            H_trunc, H_full, i;\n        if (\"SHA-1\" === variant && (1 & SUPPORTED_ALGS) !== 0) {\n            retVal = [1732584193, 4023233417, 2562383102, 271733878, 3285377520]\n        } else if (variant.lastIndexOf(\"SHA-\", 0) === 0 && (6 & SUPPORTED_ALGS) !== 0) {\n            H_trunc = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];\n            H_full = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];\n            switch (variant) {\n                case \"SHA-224\":\n                    retVal = H_trunc;\n                    break;\n                case \"SHA-256\":\n                    retVal = H_full;\n                    break;\n                case \"SHA-384\":\n                    retVal = [new Int_64(3418070365, H_trunc[0]), new Int_64(1654270250, H_trunc[1]), new Int_64(2438529370, H_trunc[2]), new Int_64(355462360, H_trunc[3]), new Int_64(1731405415, H_trunc[4]), new Int_64(41048885895, H_trunc[5]), new Int_64(3675008525, H_trunc[6]), new Int_64(1203062813, H_trunc[7])];\n                    break;\n                case \"SHA-512\":\n                    retVal = [new Int_64(H_full[0], 4089235720), new Int_64(H_full[1], 2227873595), new Int_64(H_full[2], 4271175723), new Int_64(H_full[3], 1595750129), new Int_64(H_full[4], 2917565137), new Int_64(H_full[5], 725511199), new Int_64(H_full[6], 4215389547), new Int_64(H_full[7], 327033209)];\n                    break;\n                default:\n                    throw new Error(\"Unknown SHA variant\")\n            }\n        } else if ((variant.lastIndexOf(\"SHA3-\", 0) === 0 || variant.lastIndexOf(\"SHAKE\", 0) === 0) && (8 & SUPPORTED_ALGS) !== 0) {\n            for (i = 0; i < 5; i += 1) {\n                retVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)]\n            }\n        } else {\n            throw new Error(\"No SHA variants supported\")\n        }\n        return retVal\n    }\n\n    function roundSHA1(block, H) {\n        var W = [],\n            a, b, c, d, e, T, ch = ch_32,\n            parity = parity_32,\n            maj = maj_32,\n            rotl = rotl_32,\n            safeAdd_2 = safeAdd_32_2,\n            t, safeAdd_5 = safeAdd_32_5;\n        a = H[0];\n        b = H[1];\n        c = H[2];\n        d = H[3];\n        e = H[4];\n        for (t = 0; t < 80; t += 1) {\n            if (t < 16) {\n                W[t] = block[t]\n            } else {\n                W[t] = rotl(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1)\n            }\n            if (t < 20) {\n                T = safeAdd_5(rotl(a, 5), ch(b, c, d), e, 1518500249, W[t])\n            } else if (t < 40) {\n                T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 1859775393, W[t])\n            } else if (t < 60) {\n                T = safeAdd_5(rotl(a, 5), maj(b, c, d), e, 2400959708, W[t])\n            } else {\n                T = safeAdd_5(rotl(a, 5), parity(b, c, d), e, 3395469782, W[t])\n            }\n            e = d;\n            d = c;\n            c = rotl(b, 30);\n            b = a;\n            a = T\n        }\n        H[0] = safeAdd_2(a, H[0]);\n        H[1] = safeAdd_2(b, H[1]);\n        H[2] = safeAdd_2(c, H[2]);\n        H[3] = safeAdd_2(d, H[3]);\n        H[4] = safeAdd_2(e, H[4]);\n        return H\n    }\n\n    function finalizeSHA1(remainder, remainderBinLen, processedBinLen, H, outputLen) {\n        var i, appendedMessageLength, offset, totalLen;\n        offset = (remainderBinLen + 65 >>> 9 << 4) + 15;\n        while (remainder.length <= offset) {\n            remainder.push(0)\n        }\n        remainder[remainderBinLen >>> 5] |= 128 << 24 - remainderBinLen % 32;\n        totalLen = remainderBinLen + processedBinLen;\n        remainder[offset] = totalLen & 4294967295;\n        remainder[offset - 1] = totalLen / TWO_PWR_32 | 0;\n        appendedMessageLength = remainder.length;\n        for (i = 0; i < appendedMessageLength; i += 16) {\n            H = roundSHA1(remainder.slice(i, i + 16), H)\n        }\n        return H\n    }\n    var K_sha2, K_sha512, r_sha3, rc_sha3;\n    if ((6 & SUPPORTED_ALGS) !== 0) {\n        K_sha2 = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];\n        if ((4 & SUPPORTED_ALGS) !== 0) {\n            K_sha512 = [new Int_64(K_sha2[0], 3609767458), new Int_64(K_sha2[1], 602891725), new Int_64(K_sha2[2], 3964484399), new Int_64(K_sha2[3], 2173295548), new Int_64(K_sha2[4], 4081628472), new Int_64(K_sha2[5], 3053834265), new Int_64(K_sha2[6], 2937671579), new Int_64(K_sha2[7], 3664609560), new Int_64(K_sha2[8], 2734883394), new Int_64(K_sha2[9], 1164996542), new Int_64(K_sha2[10], 1323610764), new Int_64(K_sha2[11], 3590304994), new Int_64(K_sha2[12], 4068182383), new Int_64(K_sha2[13], 991336113), new Int_64(K_sha2[14], 633803317), new Int_64(K_sha2[15], 3479774868), new Int_64(K_sha2[16], 2666613458), new Int_64(K_sha2[17], 944711139), new Int_64(K_sha2[18], 2341262773), new Int_64(K_sha2[19], 2007800933), new Int_64(K_sha2[20], 1495990901), new Int_64(K_sha2[21], 1856431235), new Int_64(K_sha2[22], 3175218132), new Int_64(K_sha2[23], 2198950837), new Int_64(K_sha2[24], 3999719339), new Int_64(K_sha2[25], 766784016), new Int_64(K_sha2[26], 2566594879), new Int_64(K_sha2[27], 3203337956), new Int_64(K_sha2[28], 1034457026), new Int_64(K_sha2[29], 2466948901), new Int_64(K_sha2[30], 3758326383), new Int_64(K_sha2[31], 168717936), new Int_64(K_sha2[32], 1188179964), new Int_64(K_sha2[33], 1546045734), new Int_64(K_sha2[34], 1522805485), new Int_64(K_sha2[35], 2643833823), new Int_64(K_sha2[36], 2343527390), new Int_64(K_sha2[37], 1014477480), new Int_64(K_sha2[38], 1206759142), new Int_64(K_sha2[39], 344077627), new Int_64(K_sha2[40], 1290863460), new Int_64(K_sha2[41], 3158454273), new Int_64(K_sha2[42], 3505952657), new Int_64(K_sha2[43], 106217008), new Int_64(K_sha2[44], 3606008344), new Int_64(K_sha2[45], 1432725776), new Int_64(K_sha2[46], 1467031594), new Int_64(K_sha2[47], 851169720), new Int_64(K_sha2[48], 3100823752), new Int_64(K_sha2[49], 1363258195), new Int_64(K_sha2[50], 3750685593), new Int_64(K_sha2[51], 3785050280), new Int_64(K_sha2[52], 3318307427), new Int_64(K_sha2[53], 3812723403), new Int_64(K_sha2[54], 2003034995), new Int_64(K_sha2[55], 3602036899), new Int_64(K_sha2[56], 1575990012), new Int_64(K_sha2[57], 1125592928), new Int_64(K_sha2[58], 2716904306), new Int_64(K_sha2[59], 442776044), new Int_64(K_sha2[60], 593698344), new Int_64(K_sha2[61], 3733110249), new Int_64(K_sha2[62], 2999351573), new Int_64(K_sha2[63], 3815920427), new Int_64(3391569614, 3928383900), new Int_64(3515267271, 566280711), new Int_64(3940187606, 3454069534), new Int_64(4118630271, 4000239992), new Int_64(116418474, 1914138554), new Int_64(174292421, 2731055270), new Int_64(289380356, 3203993006), new Int_64(460393269, 320620315), new Int_64(685471733, 587496836), new Int_64(852142971, 1086792851), new Int_64(1017036298, 365543100), new Int_64(1126000580, 2618297676), new Int_64(1288033470, 3409855158), new Int_64(1501505948, 4234509866), new Int_64(1607167915, 987167468), new Int_64(1816402316, 1246189591)]\n        }\n    }\n    if ((8 & SUPPORTED_ALGS) !== 0) {\n        rc_sha3 = [new Int_64(0, 1), new Int_64(0, 32898), new Int_64(2147483648, 32906), new Int_64(2147483648, 2147516416), new Int_64(0, 32907), new Int_64(0, 2147483649), new Int_64(2147483648, 2147516545), new Int_64(2147483648, 32777), new Int_64(0, 138), new Int_64(0, 136), new Int_64(0, 2147516425), new Int_64(0, 2147483658), new Int_64(0, 2147516555), new Int_64(2147483648, 139), new Int_64(2147483648, 32905), new Int_64(2147483648, 32771), new Int_64(2147483648, 32770), new Int_64(2147483648, 128), new Int_64(0, 32778), new Int_64(2147483648, 2147483658), new Int_64(2147483648, 2147516545), new Int_64(2147483648, 32896), new Int_64(0, 2147483649), new Int_64(2147483648, 2147516424)];\n        r_sha3 = [\n            [0, 36, 3, 41, 18],\n            [1, 44, 10, 45, 2],\n            [62, 6, 43, 15, 61],\n            [28, 55, 25, 21, 56],\n            [27, 20, 39, 8, 14]\n        ]\n    }\n\n    function roundSHA2(block, H, variant) {\n        var a, b, c, d, e, f, g, h, T1, T2, numRounds, t, binaryStringMult, safeAdd_2, safeAdd_4, safeAdd_5, gamma0, gamma1, sigma0, sigma1, ch, maj, Int, W = [],\n            int1, int2, offset, K;\n        if ((variant === \"SHA-224\" || variant === \"SHA-256\") && (2 & SUPPORTED_ALGS) !== 0) {\n            numRounds = 64;\n            binaryStringMult = 1;\n            Int = Number;\n            safeAdd_2 = safeAdd_32_2;\n            safeAdd_4 = safeAdd_32_4;\n            safeAdd_5 = safeAdd_32_5;\n            gamma0 = gamma0_32;\n            gamma1 = gamma1_32;\n            sigma0 = sigma0_32;\n            sigma1 = sigma1_32;\n            maj = maj_32;\n            ch = ch_32;\n            K = K_sha2\n        } else if ((variant === \"SHA-384\" || variant === \"SHA-512\") && (4 & SUPPORTED_ALGS) !== 0) {\n            numRounds = 80;\n            binaryStringMult = 2;\n            Int = Int_64;\n            safeAdd_2 = safeAdd_64_2;\n            safeAdd_4 = safeAdd_64_4;\n            safeAdd_5 = safeAdd_64_5;\n            gamma0 = gamma0_64;\n            gamma1 = gamma1_64;\n            sigma0 = sigma0_64;\n            sigma1 = sigma1_64;\n            maj = maj_64;\n            ch = ch_64;\n            K = K_sha512\n        } else {\n            throw new Error(\"Unexpected error in SHA-2 implementation\")\n        }\n        a = H[0];\n        b = H[1];\n        c = H[2];\n        d = H[3];\n        e = H[4];\n        f = H[5];\n        g = H[6];\n        h = H[7];\n        for (t = 0; t < numRounds; t += 1) {\n            if (t < 16) {\n                offset = t * binaryStringMult;\n                int1 = block.length <= offset ? 0 : block[offset];\n                int2 = block.length <= offset + 1 ? 0 : block[offset + 1];\n                W[t] = new Int(int1, int2)\n            } else {\n                W[t] = safeAdd_4(gamma1(W[t - 2]), W[t - 7], gamma0(W[t - 15]), W[t - 16])\n            }\n            T1 = safeAdd_5(h, sigma1(e), ch(e, f, g), K[t], W[t]);\n            T2 = safeAdd_2(sigma0(a), maj(a, b, c));\n            h = g;\n            g = f;\n            f = e;\n            e = safeAdd_2(d, T1);\n            d = c;\n            c = b;\n            b = a;\n            a = safeAdd_2(T1, T2)\n        }\n        H[0] = safeAdd_2(a, H[0]);\n        H[1] = safeAdd_2(b, H[1]);\n        H[2] = safeAdd_2(c, H[2]);\n        H[3] = safeAdd_2(d, H[3]);\n        H[4] = safeAdd_2(e, H[4]);\n        H[5] = safeAdd_2(f, H[5]);\n        H[6] = safeAdd_2(g, H[6]);\n        H[7] = safeAdd_2(h, H[7]);\n        return H\n    }\n\n    function finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant, outputLen) {\n        var i, appendedMessageLength, offset, retVal, binaryStringInc, totalLen;\n        if ((variant === \"SHA-224\" || variant === \"SHA-256\") && (2 & SUPPORTED_ALGS) !== 0) {\n            offset = (remainderBinLen + 65 >>> 9 << 4) + 15;\n            binaryStringInc = 16\n        } else if ((variant === \"SHA-384\" || variant === \"SHA-512\") && (4 & SUPPORTED_ALGS) !== 0) {\n            offset = (remainderBinLen + 129 >>> 10 << 5) + 31;\n            binaryStringInc = 32\n        } else {\n            throw new Error(\"Unexpected error in SHA-2 implementation\")\n        }\n        while (remainder.length <= offset) {\n            remainder.push(0)\n        }\n        remainder[remainderBinLen >>> 5] |= 128 << 24 - remainderBinLen % 32;\n        totalLen = remainderBinLen + processedBinLen;\n        remainder[offset] = totalLen & 4294967295;\n        remainder[offset - 1] = totalLen / TWO_PWR_32 | 0;\n        appendedMessageLength = remainder.length;\n        for (i = 0; i < appendedMessageLength; i += binaryStringInc) {\n            H = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant)\n        }\n        if (\"SHA-224\" === variant && (2 & SUPPORTED_ALGS) !== 0) {\n            retVal = [H[0], H[1], H[2], H[3], H[4], H[5], H[6]]\n        } else if (\"SHA-256\" === variant && (2 & SUPPORTED_ALGS) !== 0) {\n            retVal = H\n        } else if (\"SHA-384\" === variant && (4 & SUPPORTED_ALGS) !== 0) {\n            retVal = [H[0].highOrder, H[0].lowOrder, H[1].highOrder, H[1].lowOrder, H[2].highOrder, H[2].lowOrder, H[3].highOrder, H[3].lowOrder, H[4].highOrder, H[4].lowOrder, H[5].highOrder, H[5].lowOrder]\n        } else if (\"SHA-512\" === variant && (4 & SUPPORTED_ALGS) !== 0) {\n            retVal = [H[0].highOrder, H[0].lowOrder, H[1].highOrder, H[1].lowOrder, H[2].highOrder, H[2].lowOrder, H[3].highOrder, H[3].lowOrder, H[4].highOrder, H[4].lowOrder, H[5].highOrder, H[5].lowOrder, H[6].highOrder, H[6].lowOrder, H[7].highOrder, H[7].lowOrder]\n        } else {\n            throw new Error(\"Unexpected error in SHA-2 implementation\")\n        }\n        return retVal\n    }\n\n    function roundSHA3(block, state) {\n        var round, x, y, B, C = [],\n            D = [];\n        if (null !== block) {\n            for (x = 0; x < block.length; x += 2) {\n                state[(x >>> 1) % 5][(x >>> 1) / 5 | 0] = xor_64_2(state[(x >>> 1) % 5][(x >>> 1) / 5 | 0], new Int_64(block[x + 1], block[x]))\n            }\n        }\n        for (round = 0; round < 24; round += 1) {\n            B = getNewState(\"SHA3-\");\n            for (x = 0; x < 5; x += 1) {\n                C[x] = xor_64_5(state[x][0], state[x][1], state[x][2], state[x][3], state[x][4])\n            }\n            for (x = 0; x < 5; x += 1) {\n                D[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1))\n            }\n            for (x = 0; x < 5; x += 1) {\n                for (y = 0; y < 5; y += 1) {\n                    state[x][y] = xor_64_2(state[x][y], D[x])\n                }\n            }\n            for (x = 0; x < 5; x += 1) {\n                for (y = 0; y < 5; y += 1) {\n                    B[y][(2 * x + 3 * y) % 5] = rotl_64(state[x][y], r_sha3[x][y])\n                }\n            }\n            for (x = 0; x < 5; x += 1) {\n                for (y = 0; y < 5; y += 1) {\n                    state[x][y] = xor_64_2(B[x][y], new Int_64(~B[(x + 1) % 5][y].highOrder & B[(x + 2) % 5][y].highOrder, ~B[(x + 1) % 5][y].lowOrder & B[(x + 2) % 5][y].lowOrder))\n                }\n            }\n            state[0][0] = xor_64_2(state[0][0], rc_sha3[round])\n        }\n        return state\n    }\n\n    function finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, blockSize, delimiter, outputLen) {\n        var i, retVal = [],\n            binaryStringInc = blockSize >>> 5,\n            state_offset = 0,\n            remainderIntLen = remainderBinLen >>> 5,\n            temp;\n        for (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc) {\n            state = roundSHA3(remainder.slice(i, i + binaryStringInc), state);\n            remainderBinLen -= blockSize\n        }\n        remainder = remainder.slice(i);\n        remainderBinLen = remainderBinLen % blockSize;\n        while (remainder.length < binaryStringInc) {\n            remainder.push(0)\n        }\n        i = remainderBinLen >>> 3;\n        remainder[i >> 2] ^= delimiter << 8 * (i % 4);\n        remainder[binaryStringInc - 1] ^= 2147483648;\n        state = roundSHA3(remainder, state);\n        while (retVal.length * 32 < outputLen) {\n            temp = state[state_offset % 5][state_offset / 5 | 0];\n            retVal.push(temp.lowOrder);\n            if (retVal.length * 32 >= outputLen) {\n                break\n            }\n            retVal.push(temp.highOrder);\n            state_offset += 1;\n            if (0 === state_offset * 64 % blockSize) {\n                roundSHA3(null, state)\n            }\n        }\n        return retVal\n    }\n    var jsSHA = function(variant, inputFormat, options) {\n        var processedLen = 0,\n            remainder = [],\n            remainderLen = 0,\n            utfType, intermediateState, converterFunc, shaVariant = variant,\n            outputBinLen, variantBlockSize, roundFunc, finalizeFunc, stateCloneFunc, hmacKeySet = false,\n            keyWithIPad = [],\n            keyWithOPad = [],\n            numRounds, updatedCalled = false,\n            inputOptions, isSHAKE = false,\n            bigEndianMod = -1;\n        inputOptions = options || {};\n        utfType = inputOptions[\"encoding\"] || \"UTF8\";\n        numRounds = inputOptions[\"numRounds\"] || 1;\n        if (numRounds !== parseInt(numRounds, 10) || 1 > numRounds) {\n            throw new Error(\"numRounds must a integer >= 1\")\n        }\n        if (\"SHA-1\" === shaVariant && (1 & SUPPORTED_ALGS) !== 0) {\n            variantBlockSize = 512;\n            roundFunc = roundSHA1;\n            finalizeFunc = finalizeSHA1;\n            outputBinLen = 160;\n            stateCloneFunc = function(state) {\n                return state.slice()\n            }\n        } else if (shaVariant.lastIndexOf(\"SHA-\", 0) === 0 && (6 & SUPPORTED_ALGS) !== 0) {\n            roundFunc = function(block, H) {\n                return roundSHA2(block, H, shaVariant)\n            };\n            finalizeFunc = function(remainder, remainderBinLen, processedBinLen, H, outputLen) {\n                return finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, shaVariant, outputLen)\n            };\n            stateCloneFunc = function(state) {\n                return state.slice()\n            };\n            if (\"SHA-224\" === shaVariant && (2 & SUPPORTED_ALGS) !== 0) {\n                variantBlockSize = 512;\n                outputBinLen = 224\n            } else if (\"SHA-256\" === shaVariant && (2 & SUPPORTED_ALGS) !== 0) {\n                variantBlockSize = 512;\n                outputBinLen = 256\n            } else if (\"SHA-384\" === shaVariant && (4 & SUPPORTED_ALGS) !== 0) {\n                variantBlockSize = 1024;\n                outputBinLen = 384\n            } else if (\"SHA-512\" === shaVariant && (4 & SUPPORTED_ALGS) !== 0) {\n                variantBlockSize = 1024;\n                outputBinLen = 512\n            } else {\n                throw new Error(\"Chosen SHA variant is not supported\")\n            }\n        } else if ((shaVariant.lastIndexOf(\"SHA3-\", 0) === 0 || shaVariant.lastIndexOf(\"SHAKE\", 0) === 0) && (8 & SUPPORTED_ALGS) !== 0) {\n            var delimiter = 6;\n            roundFunc = roundSHA3;\n            stateCloneFunc = function(state) {\n                return cloneSHA3State(state)\n            };\n            bigEndianMod = 1;\n            if (\"SHA3-224\" === shaVariant) {\n                variantBlockSize = 1152;\n                outputBinLen = 224\n            } else if (\"SHA3-256\" === shaVariant) {\n                variantBlockSize = 1088;\n                outputBinLen = 256\n            } else if (\"SHA3-384\" === shaVariant) {\n                variantBlockSize = 832;\n                outputBinLen = 384\n            } else if (\"SHA3-512\" === shaVariant) {\n                variantBlockSize = 576;\n                outputBinLen = 512\n            } else if (\"SHAKE128\" === shaVariant) {\n                variantBlockSize = 1344;\n                outputBinLen = -1;\n                delimiter = 31;\n                isSHAKE = true\n            } else if (\"SHAKE256\" === shaVariant) {\n                variantBlockSize = 1088;\n                outputBinLen = -1;\n                delimiter = 31;\n                isSHAKE = true\n            } else {\n                throw new Error(\"Chosen SHA variant is not supported\")\n            }\n            finalizeFunc = function(remainder, remainderBinLen, processedBinLen, state, outputLen) {\n                return finalizeSHA3(remainder, remainderBinLen, processedBinLen, state, variantBlockSize, delimiter, outputLen)\n            }\n        } else {\n            throw new Error(\"Chosen SHA variant is not supported\")\n        }\n        converterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);\n        intermediateState = getNewState(shaVariant);\n        this.setHMACKey = function(key, inputFormat, options) {\n            var keyConverterFunc, convertRet, keyBinLen, keyToUse, blockByteSize, i, lastArrayIndex, keyOptions;\n            if (true === hmacKeySet) {\n                throw new Error(\"HMAC key already set\")\n            }\n            if (true === updatedCalled) {\n                throw new Error(\"Cannot set HMAC key after calling update\")\n            }\n            if (isSHAKE === true && (8 & SUPPORTED_ALGS) !== 0) {\n                throw new Error(\"SHAKE is not supported for HMAC\")\n            }\n            keyOptions = options || {};\n            utfType = keyOptions[\"encoding\"] || \"UTF8\";\n            keyConverterFunc = getStrConverter(inputFormat, utfType, bigEndianMod);\n            convertRet = keyConverterFunc(key);\n            keyBinLen = convertRet[\"binLen\"];\n            keyToUse = convertRet[\"value\"];\n            blockByteSize = variantBlockSize >>> 3;\n            lastArrayIndex = blockByteSize / 4 - 1;\n            if (blockByteSize < keyBinLen / 8) {\n                keyToUse = finalizeFunc(keyToUse, keyBinLen, 0, getNewState(shaVariant), outputBinLen);\n                while (keyToUse.length <= lastArrayIndex) {\n                    keyToUse.push(0)\n                }\n                keyToUse[lastArrayIndex] &= 4294967040\n            } else if (blockByteSize > keyBinLen / 8) {\n                while (keyToUse.length <= lastArrayIndex) {\n                    keyToUse.push(0)\n                }\n                keyToUse[lastArrayIndex] &= 4294967040\n            }\n            for (i = 0; i <= lastArrayIndex; i += 1) {\n                keyWithIPad[i] = keyToUse[i] ^ 909522486;\n                keyWithOPad[i] = keyToUse[i] ^ 1549556828\n            }\n            intermediateState = roundFunc(keyWithIPad, intermediateState);\n            processedLen = variantBlockSize;\n            hmacKeySet = true\n        };\n        this.update = function(srcString) {\n            var convertRet, chunkBinLen, chunkIntLen, chunk, i, updateProcessedLen = 0,\n                variantBlockIntInc = variantBlockSize >>> 5;\n            convertRet = converterFunc(srcString, remainder, remainderLen);\n            chunkBinLen = convertRet[\"binLen\"];\n            chunk = convertRet[\"value\"];\n            chunkIntLen = chunkBinLen >>> 5;\n            for (i = 0; i < chunkIntLen; i += variantBlockIntInc) {\n                if (updateProcessedLen + variantBlockSize <= chunkBinLen) {\n                    intermediateState = roundFunc(chunk.slice(i, i + variantBlockIntInc), intermediateState);\n                    updateProcessedLen += variantBlockSize\n                }\n            }\n            processedLen += updateProcessedLen;\n            remainder = chunk.slice(updateProcessedLen >>> 5);\n            remainderLen = chunkBinLen % variantBlockSize;\n            updatedCalled = true\n        };\n        this.getHash = function(format, options) {\n            var formatFunc, i, outputOptions, finalizedState;\n            if (true === hmacKeySet) {\n                throw new Error(\"Cannot call getHash after setting HMAC key\")\n            }\n            outputOptions = getOutputOpts(options);\n            if (isSHAKE === true && (8 & SUPPORTED_ALGS) !== 0) {\n                if (outputOptions[\"shakeLen\"] === -1) {\n                    throw new Error(\"shakeLen must be specified in options\")\n                }\n                outputBinLen = outputOptions[\"shakeLen\"]\n            }\n            switch (format) {\n                case \"HEX\":\n                    formatFunc = function(binarray) {\n                        return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions)\n                    };\n                    break;\n                case \"B64\":\n                    formatFunc = function(binarray) {\n                        return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions)\n                    };\n                    break;\n                case \"BYTES\":\n                    formatFunc = function(binarray) {\n                        return packed2bytes(binarray, outputBinLen, bigEndianMod)\n                    };\n                    break;\n                case \"ARRAYBUFFER\":\n                    try {\n                        i = new ArrayBuffer(0)\n                    } catch (ignore) {\n                        throw new Error(\"ARRAYBUFFER not supported by this environment\")\n                    }\n                    formatFunc = function(binarray) {\n                        return packed2arraybuffer(binarray, outputBinLen, bigEndianMod)\n                    };\n                    break;\n                default:\n                    throw new Error(\"format must be HEX, B64, BYTES, or ARRAYBUFFER\")\n            }\n            finalizedState = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);\n            for (i = 1; i < numRounds; i += 1) {\n                if ((8 & SUPPORTED_ALGS) !== 0 && isSHAKE === true && outputBinLen % 32 !== 0) {\n                    finalizedState[finalizedState.length - 1] &= 16777215 >>> 24 - outputBinLen % 32\n                }\n                finalizedState = finalizeFunc(finalizedState, outputBinLen, 0, getNewState(shaVariant), outputBinLen)\n            }\n            return formatFunc(finalizedState)\n        };\n        this.getHMAC = function(format, options) {\n            var formatFunc, firstHash, outputOptions, finalizedState;\n            if (false === hmacKeySet) {\n                throw new Error(\"Cannot call getHMAC without first setting HMAC key\")\n            }\n            outputOptions = getOutputOpts(options);\n            switch (format) {\n                case \"HEX\":\n                    formatFunc = function(binarray) {\n                        return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions)\n                    };\n                    break;\n                case \"B64\":\n                    formatFunc = function(binarray) {\n                        return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions)\n                    };\n                    break;\n                case \"BYTES\":\n                    formatFunc = function(binarray) {\n                        return packed2bytes(binarray, outputBinLen, bigEndianMod)\n                    };\n                    break;\n                case \"ARRAYBUFFER\":\n                    try {\n                        formatFunc = new ArrayBuffer(0)\n                    } catch (ignore) {\n                        throw new Error(\"ARRAYBUFFER not supported by this environment\")\n                    }\n                    formatFunc = function(binarray) {\n                        return packed2arraybuffer(binarray, outputBinLen, bigEndianMod)\n                    };\n                    break;\n                default:\n                    throw new Error(\"outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER\")\n            }\n            firstHash = finalizeFunc(remainder.slice(), remainderLen, processedLen, stateCloneFunc(intermediateState), outputBinLen);\n            finalizedState = roundFunc(keyWithOPad, getNewState(shaVariant));\n            finalizedState = finalizeFunc(firstHash, outputBinLen, variantBlockSize, finalizedState, outputBinLen);\n            return formatFunc(finalizedState)\n        }\n    };\n    if (\"function\" === typeof define && define[\"amd\"]) {\n        define(function() {\n            return jsSHA\n        })\n    } else if (\"undefined\" !== typeof exports) {\n        if (\"undefined\" !== typeof module && module[\"exports\"]) {\n            module[\"exports\"] = jsSHA;\n            exports = jsSHA\n        } else {\n            exports = jsSHA\n        }\n    } else {\n        global[\"jsSHA\"] = jsSHA\n    }\n})(this);\n(function(global) {\n    \"use strict\";\n\n    function definition(path, Failure, iterate, isObject) {\n        var settings;\n        demand.on(\"postConfigure:\" + path, function(options) {\n            if (isObject(options)) {\n                settings = options\n            }\n        }).on(\"postRequest\", function(dependency) {\n            var options, sha, hash;\n            if (options = isEnabled(dependency.path)) {\n                try {\n                    sha = new global.jsSHA(options.type, \"TEXT\");\n                    sha.update(dependency.source);\n                    if ((hash = sha.getHash(\"B64\")) !== options.hash) {\n                        dependency.dfd.reject(new Failure('hash mismatch, should be \"' + options.hash + '\" but is \"' + hash + '\" (sri)', dependency.id))\n                    }\n                } catch (error) {\n                    dependency.dfd.reject(new Failure(\"unsupported hashing algorithm (sri)\", dependency.id))\n                }\n            }\n        });\n\n        function isEnabled(path) {\n            var match;\n            iterate(settings, function(key, value) {\n                if (key === path) {\n                    match = value;\n                    return false\n                }\n            });\n            return match || false\n        }\n        return true\n    }\n    provide([\"path\", \"/demand/failure\", \"/demand/function/iterate\", \"/demand/validator/isObject\"], definition)\n})(this);"]}