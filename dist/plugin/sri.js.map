{"version":3,"sources":["plugin/sri.js"],"names":["Int64","msint32","lsint32","this","h","l","add322","a","b","lsw","maxByte1","add324","c","d","add325","e","add642","x","y","msw","lowOrder","highOrder","add644","add645","gamma032","rotr32","shr32","gamma132","gamma064","rotr1","rotr64","rotr8","shr7","shr64","gamma164","rotr19","rotr61","shr6","sigma032","sigma132","sigma064","rotr28","rotr34","rotr39","sigma164","rotr14","rotr18","rotr41","maj32","z","maj64","ch32","ch64","n","tmp","maxByte2","str2binb","str","existingBin","existingBinLen","binArr","bin","binLength","binArrLength","existingByteLen","codePnt","j","intOffset","byteOffset","i","strLength","length","byteCnt","charCodeAt","push","value","binb2b64","binarray","lengthTotal","triplet","offset","int1","int2","result","b64Tab","charAt","getH","variant","full","trunc","roundSHA2","block","H","f","g","T1","T2","numRounds","binaryStringMult","add2","add4","add5","gamma0","gamma1","sigma0","sigma1","ch","maj","Int","K","blockLength","t","W","Number","Ksha2","Ksha512","finalizeSHA2","remainder","remainderBinLen","processedBinLen","appendedMessageLength","binaryStringInc","remainderLength","slice","hash","source","variantBlockSize","intermediateH","convertRet","chunkBinLen","chunk","chunkIntLen","variantBlockIntInc","remainderLen","updateProcessedLen","processedLen","definition","path","Failure","iterate","isObject","isEnabled","match","settings","key","demand","on","options","dependency","type","dfd","reject","id","provide"],"mappings":"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","file":"sri.js","sourcesContent":["/**\n * Based on jsSHA:\n *   Repo:    https://github.com/Caligatio/jsSHA\n *   License: https://github.com/Caligatio/jsSHA/blob/master/LICENSE\n */\n\n(function() {\n\t'use strict';\n\n\tvar maxByte1 = 0xFFFF,\n\t\tmaxByte2 = 0xFFFFFFFF,\n\t\tb64Tab   = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\t\tKsha2 = [\n\t\t\t0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n\t\t\t0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n\t\t\t0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n\t\t\t0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n\t\t\t0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n\t\t\t0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n\t\t\t0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n\t\t\t0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n\t\t\t0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n\t\t\t0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n\t\t\t0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n\t\t\t0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n\t\t\t0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n\t\t\t0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n\t\t\t0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n\t\t\t0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n\t\t],\n\t\tKsha512 = [\n\t\t\tnew Int64(Ksha2[ 0], 0xd728ae22), new Int64(Ksha2[ 1], 0x23ef65cd),\n\t\t\tnew Int64(Ksha2[ 2], 0xec4d3b2f), new Int64(Ksha2[ 3], 0x8189dbbc),\n\t\t\tnew Int64(Ksha2[ 4], 0xf348b538), new Int64(Ksha2[ 5], 0xb605d019),\n\t\t\tnew Int64(Ksha2[ 6], 0xaf194f9b), new Int64(Ksha2[ 7], 0xda6d8118),\n\t\t\tnew Int64(Ksha2[ 8], 0xa3030242), new Int64(Ksha2[ 9], 0x45706fbe),\n\t\t\tnew Int64(Ksha2[10], 0x4ee4b28c), new Int64(Ksha2[11], 0xd5ffb4e2),\n\t\t\tnew Int64(Ksha2[12], 0xf27b896f), new Int64(Ksha2[13], 0x3b1696b1),\n\t\t\tnew Int64(Ksha2[14], 0x25c71235), new Int64(Ksha2[15], 0xcf692694),\n\t\t\tnew Int64(Ksha2[16], 0x9ef14ad2), new Int64(Ksha2[17], 0x384f25e3),\n\t\t\tnew Int64(Ksha2[18], 0x8b8cd5b5), new Int64(Ksha2[19], 0x77ac9c65),\n\t\t\tnew Int64(Ksha2[20], 0x592b0275), new Int64(Ksha2[21], 0x6ea6e483),\n\t\t\tnew Int64(Ksha2[22], 0xbd41fbd4), new Int64(Ksha2[23], 0x831153b5),\n\t\t\tnew Int64(Ksha2[24], 0xee66dfab), new Int64(Ksha2[25], 0x2db43210),\n\t\t\tnew Int64(Ksha2[26], 0x98fb213f), new Int64(Ksha2[27], 0xbeef0ee4),\n\t\t\tnew Int64(Ksha2[28], 0x3da88fc2), new Int64(Ksha2[29], 0x930aa725),\n\t\t\tnew Int64(Ksha2[30], 0xe003826f), new Int64(Ksha2[31], 0x0a0e6e70),\n\t\t\tnew Int64(Ksha2[32], 0x46d22ffc), new Int64(Ksha2[33], 0x5c26c926),\n\t\t\tnew Int64(Ksha2[34], 0x5ac42aed), new Int64(Ksha2[35], 0x9d95b3df),\n\t\t\tnew Int64(Ksha2[36], 0x8baf63de), new Int64(Ksha2[37], 0x3c77b2a8),\n\t\t\tnew Int64(Ksha2[38], 0x47edaee6), new Int64(Ksha2[39], 0x1482353b),\n\t\t\tnew Int64(Ksha2[40], 0x4cf10364), new Int64(Ksha2[41], 0xbc423001),\n\t\t\tnew Int64(Ksha2[42], 0xd0f89791), new Int64(Ksha2[43], 0x0654be30),\n\t\t\tnew Int64(Ksha2[44], 0xd6ef5218), new Int64(Ksha2[45], 0x5565a910),\n\t\t\tnew Int64(Ksha2[46], 0x5771202a), new Int64(Ksha2[47], 0x32bbd1b8),\n\t\t\tnew Int64(Ksha2[48], 0xb8d2d0c8), new Int64(Ksha2[49], 0x5141ab53),\n\t\t\tnew Int64(Ksha2[50], 0xdf8eeb99), new Int64(Ksha2[51], 0xe19b48a8),\n\t\t\tnew Int64(Ksha2[52], 0xc5c95a63), new Int64(Ksha2[53], 0xe3418acb),\n\t\t\tnew Int64(Ksha2[54], 0x7763e373), new Int64(Ksha2[55], 0xd6b2b8a3),\n\t\t\tnew Int64(Ksha2[56], 0x5defb2fc), new Int64(Ksha2[57], 0x43172f60),\n\t\t\tnew Int64(Ksha2[58], 0xa1f0ab72), new Int64(Ksha2[59], 0x1a6439ec),\n\t\t\tnew Int64(Ksha2[60], 0x23631e28), new Int64(Ksha2[61], 0xde82bde9),\n\t\t\tnew Int64(Ksha2[62], 0xb2c67915), new Int64(Ksha2[63], 0xe372532b),\n\t\t\tnew Int64(0xca273ece, 0xea26619c), new Int64(0xd186b8c7, 0x21c0c207),\n\t\t\tnew Int64(0xeada7dd6, 0xcde0eb1e), new Int64(0xf57d4f7f, 0xee6ed178),\n\t\t\tnew Int64(0x06f067aa, 0x72176fba), new Int64(0x0a637dc5, 0xa2c898a6),\n\t\t\tnew Int64(0x113f9804, 0xbef90dae), new Int64(0x1b710b35, 0x131c471b),\n\t\t\tnew Int64(0x28db77f5, 0x23047d84), new Int64(0x32caab7b, 0x40c72493),\n\t\t\tnew Int64(0x3c9ebe0a, 0x15c9bebc), new Int64(0x431d67c4, 0x9c100d4c),\n\t\t\tnew Int64(0x4cc5d4be, 0xcb3e42b6), new Int64(0x597f299c, 0xfc657e2a),\n\t\t\tnew Int64(0x5fcb6fab, 0x3ad6faec), new Int64(0x6c44198c, 0x4a475817)\n\t\t];\n\n\n\tfunction Int64(msint32, lsint32) {\n\t\tthis.h = msint32;\n\t\tthis.l  = lsint32;\n\t}\n\n\tfunction add322(a, b) {\n\t\tvar lsw = (a & maxByte1) + (b & maxByte1),\n\t\t\tmsw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);\n\n\t\treturn ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\t}\n\n\tfunction add324(a, b, c, d) {\n\t\tvar lsw = (a & maxByte1) + (b & maxByte1) + (c & maxByte1) + (d & maxByte1),\n\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (lsw >>> 16);\n\n\t\treturn ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\t}\n\n\tfunction add325(a, b, c, d, e) {\n\t\tvar lsw = (a & maxByte1) + (b & maxByte1) + (c & maxByte1) + (d & maxByte1) + (e & maxByte1),\n\t\t\tmsw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (e >>> 16) + (lsw >>> 16);\n\n\t\treturn ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\t}\n\n\tfunction add642(x, y) {\n\t\tvar lsw, msw, lowOrder, highOrder;\n\n\t\tlsw       = (x.l & maxByte1) + (y.l & maxByte1);\n\t\tmsw       = (x.l >>> 16) + (y.l >>> 16) + (lsw >>> 16);\n\t\tlowOrder  = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\tlsw       = (x.h & maxByte1) + (y.h & maxByte1) + (msw >>> 16);\n\t\tmsw       = (x.h >>> 16) + (y.h >>> 16) + (lsw >>> 16);\n\t\thighOrder = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\treturn new Int64(highOrder, lowOrder);\n\t}\n\n\tfunction add644(a, b, c, d) {\n\t\tvar lsw, msw, lowOrder, highOrder;\n\n\t\tlsw       = (a.l & maxByte1) + (b.l & maxByte1) + (c.l & maxByte1) + (d.l & maxByte1);\n\t\tmsw       = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (lsw >>> 16);\n\t\tlowOrder  = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\tlsw       = (a.h & maxByte1) + (b.h & maxByte1) + (c.h & maxByte1) + (d.h & maxByte1) + (msw >>> 16);\n\t\tmsw       = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (lsw >>> 16);\n\t\thighOrder = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\treturn new Int64(highOrder, lowOrder);\n\t}\n\n\tfunction add645(a, b, c, d, e) {\n\t\tvar lsw, msw, lowOrder, highOrder;\n\n\t\tlsw       = (a.l & maxByte1) + (b.l & maxByte1) + (c.l & maxByte1) + (d.l & maxByte1) + (e.l & maxByte1);\n\t\tmsw       = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (lsw >>> 16);\n\t\tlowOrder  = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\tlsw       = (a.h & maxByte1) + (b.h & maxByte1) + (c.h & maxByte1) + (d.h & maxByte1) + (e.h & maxByte1) + (msw >>> 16);\n\t\tmsw       = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (lsw >>> 16);\n\t\thighOrder = ((msw & maxByte1) << 16) | (lsw & maxByte1);\n\n\t\treturn new Int64(highOrder, lowOrder);\n\t}\n\n\tfunction gamma032(x) {\n\t\treturn rotr32(x, 7) ^ rotr32(x, 18) ^ shr32(x, 3);\n\t}\n\n\tfunction gamma132(x) {\n\t\treturn rotr32(x, 17) ^ rotr32(x, 19) ^ shr32(x, 10);\n\t}\n\n\tfunction gamma064(x) {\n\t\tvar rotr1 = rotr64(x, 1),\n\t\t\trotr8 = rotr64(x, 8),\n\t\t\tshr7  = shr64(x, 7);\n\n\t\treturn new Int64(\n\t\t\trotr1.h ^ rotr8.h ^ shr7.h,\n\t\t\trotr1.l ^ rotr8.l ^ shr7.l\n\t\t);\n\t}\n\n\tfunction gamma164(x) {\n\t\tvar rotr19 = rotr64(x, 19),\n\t\t\trotr61 = rotr64(x, 61),\n\t\t\tshr6   = shr64(x, 6);\n\n\t\treturn new Int64(\n\t\t\trotr19.h ^ rotr61.h ^ shr6.h,\n\t\t\trotr19.l ^ rotr61.l ^ shr6.l\n\t\t);\n\t}\n\n\tfunction sigma032(x) {\n\t\treturn rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n\t}\n\n\tfunction sigma132(x) {\n\t\treturn rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n\t}\n\n\tfunction sigma064(x) {\n\t\tvar rotr28 = rotr64(x, 28),\n\t\t\trotr34 = rotr64(x, 34),\n\t\t\trotr39 = rotr64(x, 39);\n\n\t\treturn new Int64(\n\t\t\trotr28.h ^ rotr34.h ^ rotr39.h,\n\t\t\trotr28.l ^ rotr34.l ^ rotr39.l\n\t\t);\n\t}\n\n\tfunction sigma164(x) {\n\t\tvar rotr14 = rotr64(x, 14),\n\t\t\trotr18 = rotr64(x, 18),\n\t\t\trotr41 = rotr64(x, 41);\n\n\t\treturn new Int64(\n\t\t\trotr14.h ^ rotr18.h ^ rotr41.h,\n\t\t\trotr14.l ^ rotr18.l ^ rotr41.l\n\t\t);\n\t}\n\n\tfunction maj32(x, y, z) {\n\t\treturn (x & y) ^ (x & z) ^ (y & z);\n\t}\n\n\tfunction maj64(x, y, z) {\n\t\treturn new Int64(\n\t\t\t(x.h & y.h) ^ (x.h & z.h) ^ (y.h & z.h),\n\t\t\t(x.l & y.l) ^ (x.l & z.l) ^ (y.l & z.l)\n\t\t);\n\t}\n\n\tfunction ch32(x, y, z) {\n\t\treturn (x & y) ^ (~x & z);\n\t}\n\n\tfunction ch64(x, y, z) {\n\t\treturn new Int64(\n\t\t\t(x.h & y.h) ^ (~x.h & z.h),\n\t\t\t(x.l & y.l) ^ (~x.l & z.l)\n\t\t);\n\t}\n\n\tfunction rotr32(x, n) {\n\t\treturn (x >>> n) | (x << (32 - n));\n\t}\n\n\tfunction rotr64(x, n) {\n\t\tvar result = null, tmp = new Int64(x.h, x.l);\n\n\t\tif(32 >= n) {\n\t\t\tresult = new Int64(\n\t\t\t\t(tmp.h >>> n) | ((tmp.l << (32 - n)) & maxByte2),\n\t\t\t\t(tmp.l >>> n) | ((tmp.h << (32 - n)) & maxByte2)\n\t\t\t);\n\t\t} else {\n\t\t\tresult = new Int64(\n\t\t\t\t(tmp.l >>> (n - 32)) | ((tmp.h << (64 - n)) & maxByte2),\n\t\t\t\t(tmp.h >>> (n - 32)) | ((tmp.l << (64 - n)) & maxByte2)\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction shr32(x, n) {\n\t\treturn x >>> n;\n\t}\n\n\tfunction shr64(x, n) {\n\t\tvar result = null;\n\n\t\tif(32 >= n) {\n\t\t\tresult = new Int64(\n\t\t\t\tx.h >>> n,\n\t\t\t\tx.l >>> n | ((x.h << (32 - n)) & maxByte2)\n\t\t\t);\n\t\t} else {\n\t\t\tresult = new Int64(\n\t\t\t\t0,\n\t\t\t\tx.h >>> (n - 32)\n\t\t\t);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction str2binb(str, existingBin, existingBinLen) {\n\t\tvar i = 0, strLength = str.length, byteCnt = 0, binArr, bin, binLength, binArrLength, existingByteLen, codePnt, j, intOffset, byteOffset;\n\n\t\tbin             = existingBin || [ 0 ];\n\t\texistingBinLen  = existingBinLen || 0;\n\t\texistingByteLen = existingBinLen >>> 3;\n\n\t\tfor(; i < strLength; i++) {\n\t\t\tcodePnt = str.charCodeAt(i);\n\t\t\tbinArr  = [];\n\n\t\t\tif (0x80 > codePnt) {\n\t\t\t\tbinArr.push(codePnt);\n\t\t\t} else if (0x800 > codePnt) {\n\t\t\t\tbinArr.push(0xC0 | (codePnt >>> 6));\n\t\t\t\tbinArr.push(0x80 | (codePnt & 0x3F));\n\t\t\t} else if ((0xd800 > codePnt) || (0xe000 <= codePnt)) {\n\t\t\t\tbinArr.push(\n\t\t\t\t\t0xe0 | (codePnt >>> 12),\n\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),\n\t\t\t\t\t0x80 | (codePnt & 0x3f)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t\tcodePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n\n\t\t\t\tbinArr.push(\n\t\t\t\t\t0xf0 | (codePnt >>> 18),\n\t\t\t\t\t0x80 | ((codePnt >>> 12) & 0x3f),\n\t\t\t\t\t0x80 | ((codePnt >>> 6) & 0x3f),\n\t\t\t\t\t0x80 | (codePnt & 0x3f)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tbinLength    = bin.length;\n\t\t\tbinArrLength = binArr.length;\n\n\t\t\tfor(j = 0; j < binArrLength; j++) {\n\t\t\t\tbyteOffset = byteCnt + existingByteLen;\n\t\t\t\tintOffset  = byteOffset >>> 2;\n\n\t\t\t\twhile(binLength <= intOffset) {\n\t\t\t\t\tbin.push(0);\n\n\t\t\t\t\tbinLength++;\n\t\t\t\t}\n\n\t\t\t\tbin[intOffset] |= binArr[j] << (8 * (3 - (byteOffset % 4)));\n\n\t\t\t\tbyteCnt++;\n\t\t\t}\n\t\t}\n\n\t\treturn { 'value': bin, 'length' : byteCnt * 8 + existingBinLen };\n\t}\n\n\tfunction binb2b64(binarray) {\n\t\tvar result = '', length = binarray.length * 4, lengthTotal, i = 0, triplet, offset, int1, int2, j;\n\n\t\tfor(; i < length; i += 3) {\n\t\t\tlengthTotal = binarray.length;\n\n\t\t\toffset  = (i + 1) >>> 2;\n\t\t\tint1    = (lengthTotal <= offset) ? 0 : binarray[offset];\n\t\t\toffset  = (i + 2) >>> 2;\n\t\t\tint2    = (lengthTotal <= offset) ? 0 : binarray[offset];\n\t\t\ttriplet = (((binarray[i >>> 2] >>> 8 * (3 - i % 4)) & 0xFF) << 16) | (((int1 >>> 8 * (3 - (i + 1) % 4)) & 0xFF) << 8) | ((int2 >>> 8 * (3 - (i + 2) % 4)) & 0xFF);\n\n\t\t\tfor(j = 0; j < 4; j++) {\n\t\t\t\tif(i * 8 + j * 6 <= lengthTotal * 32) {\n\t\t\t\t\tresult += b64Tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);\n\t\t\t\t} else {\n\t\t\t\t\tresult += '=';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction getH(variant) {\n\t\tvar full = [\n\t\t\t\t0x6A09E667, 0xBB67AE85, 0x3C6EF372, 0xA54FF53A,\n\t\t\t\t0x510E527F, 0x9B05688C, 0x1F83D9AB, 0x5BE0CD19\n\t\t\t],\n\t\t\ttrunc = [\n\t\t\t\t0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t\t\t\t0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t\t\t],\n\t\t\tresult;\n\n\t\tswitch(variant) {\n\t\t\tcase 'sha256':\n\t\t\t\tresult = full;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha384':\n\t\t\t\tresult = [\n\t\t\t\t\tnew Int64(0xcbbb9d5d, trunc[0]),\n\t\t\t\t\tnew Int64(0x0629a292a, trunc[1]),\n\t\t\t\t\tnew Int64(0x9159015a, trunc[2]),\n\t\t\t\t\tnew Int64(0x0152fecd8, trunc[3]),\n\t\t\t\t\tnew Int64(0x67332667, trunc[4]),\n\t\t\t\t\tnew Int64(0x98eb44a87, trunc[5]),\n\t\t\t\t\tnew Int64(0xdb0c2e0d, trunc[6]),\n\t\t\t\t\tnew Int64(0x047b5481d, trunc[7])\n\t\t\t\t];\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha512':\n\t\t\t\tresult = [\n\t\t\t\t\tnew Int64(full[0], 0xf3bcc908),\n\t\t\t\t\tnew Int64(full[1], 0x84caa73b),\n\t\t\t\t\tnew Int64(full[2], 0xfe94f82b),\n\t\t\t\t\tnew Int64(full[3], 0x5f1d36f1),\n\t\t\t\t\tnew Int64(full[4], 0xade682d1),\n\t\t\t\t\tnew Int64(full[5], 0x2b3e6c1f),\n\t\t\t\t\tnew Int64(full[6], 0xfb41bd6b),\n\t\t\t\t\tnew Int64(full[7], 0x137e2179)\n\t\t\t\t];\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction roundSHA2(block, H, variant)\n\t{\n\t\tvar blockLength = block.length, t = 0, a, b, c, d, e, f, g, h, T1, T2, numRounds, binaryStringMult,\n\t\t\tadd2, add4, add5, gamma0, gamma1, sigma0, sigma1,\n\t\t\tch, maj, Int, W = [], int1, int2, offset, K;\n\n\t\tswitch(variant) {\n\t\t\tcase 'sha256':\n\t\t\t\tnumRounds        = 64;\n\t\t\t\tbinaryStringMult = 1;\n\t\t\t\tInt              = Number;\n\t\t\t\tadd2             = add322;\n\t\t\t\tadd4             = add324;\n\t\t\t\tadd5             = add325;\n\t\t\t\tgamma0           = gamma032;\n\t\t\t\tgamma1           = gamma132;\n\t\t\t\tsigma0           = sigma032;\n\t\t\t\tsigma1           = sigma132;\n\t\t\t\tmaj              = maj32;\n\t\t\t\tch               = ch32;\n\t\t\t\tK                = Ksha2;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha384':\n\t\t\tcase 'sha512':\n\t\t\t\tnumRounds        = 80;\n\t\t\t\tbinaryStringMult = 2;\n\t\t\t\tInt              = Int64;\n\t\t\t\tadd2             = add642;\n\t\t\t\tadd4             = add644;\n\t\t\t\tadd5             = add645;\n\t\t\t\tgamma0           = gamma064;\n\t\t\t\tgamma1           = gamma164;\n\t\t\t\tsigma0           = sigma064;\n\t\t\t\tsigma1           = sigma164;\n\t\t\t\tmaj              = maj64;\n\t\t\t\tch               = ch64;\n\t\t\t\tK                = Ksha512;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\ta = H[0];\n\t\tb = H[1];\n\t\tc = H[2];\n\t\td = H[3];\n\t\te = H[4];\n\t\tf = H[5];\n\t\tg = H[6];\n\t\th = H[7];\n\n\t\tfor(; t < numRounds; t++) {\n\t\t\tif(t < 16) {\n\t\t\t\toffset = t * binaryStringMult;\n\t\t\t\tint1   = (blockLength <= offset) ? 0 : block[offset];\n\t\t\t\tint2   = (blockLength <= offset + 1) ? 0 : block[offset + 1];\n\t\t\t\tW[t]   = new Int(int1, int2);\n\t\t\t} else {\n\t\t\t\tW[t] = add4(gamma1(W[t - 2]), W[t - 7], gamma0(W[t - 15]), W[t - 16]);\n\t\t\t}\n\n\t\t\tT1 = add5(h, sigma1(e), ch(e, f, g), K[t], W[t]);\n\t\t\tT2 = add2(sigma0(a), maj(a, b, c));\n\t\t\th  = g;\n\t\t\tg  = f;\n\t\t\tf  = e;\n\t\t\te  = add2(d, T1);\n\t\t\td  = c;\n\t\t\tc  = b;\n\t\t\tb  = a;\n\t\t\ta  = add2(T1, T2);\n\t\t}\n\n\t\tH[0] = add2(a, H[0]);\n\t\tH[1] = add2(b, H[1]);\n\t\tH[2] = add2(c, H[2]);\n\t\tH[3] = add2(d, H[3]);\n\t\tH[4] = add2(e, H[4]);\n\t\tH[5] = add2(f, H[5]);\n\t\tH[6] = add2(g, H[6]);\n\t\tH[7] = add2(h, H[7]);\n\n\t\treturn H;\n\t}\n\n\tfunction finalizeSHA2(remainder, remainderBinLen, processedBinLen, H, variant) {\n\t\tvar remainderLength = remainder.length, i = 0, appendedMessageLength, offset, result, binaryStringInc;\n\n\t\tswitch(variant) {\n\t\t\tcase 'sha256':\n\t\t\t\toffset          = (((remainderBinLen + 65) >>> 9) << 4) + 15;\n\t\t\t\tbinaryStringInc = 16;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha384':\n\t\t\tcase 'sha512':\n\t\t\t\toffset          = (((remainderBinLen + 129) >>> 10) << 5) + 31;\n\t\t\t\tbinaryStringInc = 32;\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\twhile(remainderLength <= offset) {\n\t\t\tremainder.push(0);\n\n\t\t\tremainderLength++;\n\t\t}\n\n\t\tremainder[remainderBinLen >>> 5] |= 0x80 << (24 - remainderBinLen % 32);\n\t\tremainder[offset]                 = remainderBinLen + processedBinLen;\n\t\tappendedMessageLength             = remainderLength;\n\n\t\tfor(; i < appendedMessageLength; i += binaryStringInc) {\n\t\t\tH = roundSHA2(remainder.slice(i, i + binaryStringInc), H, variant);\n\t\t}\n\n\t\tswitch(variant) {\n\t\t\tcase 'sha256':\n\t\t\t\tresult = H;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha384':\n\t\t\t\tresult = [\n\t\t\t\t\tH[0].h, H[0].l,\n\t\t\t\t\tH[1].h, H[1].l,\n\t\t\t\t\tH[2].h, H[2].l,\n\t\t\t\t\tH[3].h, H[3].l,\n\t\t\t\t\tH[4].h, H[4].l,\n\t\t\t\t\tH[5].h, H[5].l\n\t\t\t\t];\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha512':\n\t\t\t\tresult = [\n\t\t\t\t\tH[0].h, H[0].l,\n\t\t\t\t\tH[1].h, H[1].l,\n\t\t\t\t\tH[2].h, H[2].l,\n\t\t\t\t\tH[3].h, H[3].l,\n\t\t\t\t\tH[4].h, H[4].l,\n\t\t\t\t\tH[5].h, H[5].l,\n\t\t\t\t\tH[6].h, H[6].l,\n\t\t\t\t\tH[7].h, H[7].l\n\t\t\t\t];\n\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfunction hash(variant, source) {\n\t\tvar remainder = [], remainderLen = 0, i = 0, updateProcessedLen = 0, processedLen = 0, variantBlockSize, intermediateH, convertRet, chunkBinLen, chunk, chunkIntLen, variantBlockIntInc;\n\n\t\tswitch(variant) {\n\t\t\tcase 'sha256':\n\t\t\t\tvariantBlockSize = 512;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha384':\n\t\t\t\tvariantBlockSize = 1024;\n\n\t\t\t\tbreak;\n\t\t\tcase 'sha512':\n\t\t\t\tvariantBlockSize = 1024;\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow 'SHA_VARIANT_ERROR';\n\t\t}\n\n\t\tintermediateH      = getH(variant);\n\t\tconvertRet         = str2binb(source, remainder, remainderLen);\n\t\tchunkBinLen        = convertRet['length'];\n\t\tchunk              = convertRet['value'];\n\t\tchunkIntLen        = chunkBinLen >>> 5;\n\t\tvariantBlockIntInc = variantBlockSize >>> 5;\n\n\t\tfor(; i < chunkIntLen; i += variantBlockIntInc) {\n\t\t\tif(updateProcessedLen + variantBlockSize <= chunkBinLen) {\n\t\t\t\tintermediateH       = roundSHA2(chunk.slice(i, i + variantBlockIntInc), intermediateH, variant);\n\t\t\t\tupdateProcessedLen += variantBlockSize;\n\t\t\t}\n\t\t}\n\n\t\tprocessedLen += updateProcessedLen;\n\t\tremainder     = chunk.slice(updateProcessedLen >>> 5);\n\t\tremainderLen  = chunkBinLen % variantBlockSize;\n\t\tintermediateH = finalizeSHA2(remainder, remainderLen, processedLen, intermediateH, variant);\n\n\t\treturn binb2b64(intermediateH);\n\t}\n\n\tfunction definition(path, Failure, iterate, isObject) {\n\t\tvar settings;\n\t\t\n\t\tdemand\n\t\t\t.on('postConfigure:' + path, function(options) {\n\t\t\t\tif(isObject(options)) {\n\t\t\t\t\tsettings = options;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on('postRequest', function(dependency) {\n\t\t\t\tvar options;\n\n\t\t\t\tif(options = isEnabled(dependency.path)) {\n\t\t\t\t\tif(hash(options.type, dependency.source) !== options.hash) {\n\t\t\t\t\t\tdependency.dfd.reject(new Failure('error resolving (sri)', dependency.id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\tfunction isEnabled(path) {\n\t\t\tvar match;\n\t\t\t\n\t\t\titerate(settings, function(key, value) {\n\t\t\t\tif(key === path) {\n\t\t\t\t\tmatch = value;\n\t\t\t\t\t\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn match || false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprovide([ 'path', '/demand/failure', '/demand/function/iterate', '/demand/validator/isObject' ], definition);\n}());"]}