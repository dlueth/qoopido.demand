{"version":3,"sources":["handler/css.js"],"names":["document","provide","abstractHandler","functionResolveSourcemaps","target","getElementsByTagName","resolver","createElement","regexMatchUrl","regexMatchImport","regexIsAbsolutePath","regexIsAbsoluteUri","regexMatchType","resolveUrl","url","href","replaceUri","source","match","replacement","test","replace","HandlerCss","prototype","validate","type","onPreRequest","dependency","pathname","slice","length","onPostRequest","base","host","exec","process","element","querySelector","id","setAttribute","appendChild","tagName","styleSheet","cssText","textContent","extends"],"mappings":";CAAA,SAAUA,GACN,aAqEAC,SAAS,2BAA4B,sCAnErC,SAAoBC,EAAiBC,GACjC,IACIC,EAASJ,EAASK,qBAAqB,QAAQ,GAC/CC,EAAWN,EAASO,cAAc,KAClCC,EAAgB,oCAChBC,EAAmB,4BACnBC,EAAsB,OACtBC,EAAqB,yBACrBC,EAAiB,aAErB,SAASC,EAAWC,GAEhB,OADAR,EAASS,KAAOD,EACTR,EAGX,SAASU,EAAWC,EAAQC,EAAOC,GAI/B,OAHKR,EAAmBS,KAAKF,EAAM,MAC/BD,EAASA,EAAOI,QAAQH,EAAM,GAAIC,IAE/BF,EAGX,SAASK,KA2CT,OA1CAA,EAAWC,WACPC,SAAU,SAASC,GACf,OAAOb,EAAeQ,KAAKK,IAE/BC,aAAc,SAASC,GACnB,IAAIC,EAAWD,EAAWb,IAAIc,SAC9BD,EAAWb,IAAIc,SA5BV,SA4BqBA,EAASC,OA5B9B,OA4B4CC,QAAqBF,EA5BjE,OA4BqFA,GAE9FG,cAAe,SAASJ,GAMpB,IALA,IAIIT,EAJAJ,EAAMD,EAAWc,EAAWb,IAAM,OAClCkB,EAAOlB,EAAIC,KACXkB,EAAO,KAAOnB,EAAImB,KAClBhB,EAASU,EAAWV,OAEjBC,EAAQV,EAAc0B,KAAKjB,IAC9BA,EAASD,EAAWC,EAAQC,EAAO,QAAUL,EAAWH,EAAoBU,KAAKF,EAAM,IAAMe,EAAOf,EAAM,GAAKc,EAAOd,EAAM,IAAIH,KAAO,MAE3I,KAAOG,EAAQT,EAAiByB,KAAKjB,IACjCA,EAASD,EAAWC,EAAQC,EAAO,YAAcL,EAAWH,EAAoBU,KAAKF,EAAM,IAAMe,EAAOf,EAAM,GAAKc,EAAOd,EAAM,IAAIH,KAAO,KAE/IY,EAAWV,OAASd,EAA0BwB,EAAWb,IAAKG,IAElEkB,QAAS,SAASR,GACd,IAAIS,EAAUpC,EAASqC,cAAc,eAAiBV,EAAWW,GAAK,MACjEF,KACDA,EAAUpC,EAASO,cAAc,UACzBkB,KAAO,WACfW,EAAQG,aAAa,YAAaZ,EAAWW,IAC7ClC,EAAOoC,YAAYJ,IAEC,UAApBA,EAAQK,UACJL,EAAQM,WACRN,EAAQM,WAAWC,QAAUhB,EAAWV,OAExCmB,EAAQQ,YAAcjB,EAAWV,QAGzChB,QAAQ,WACJ,OAAOmC,MAIZ,IAAId,EAAWuB,QAAQ3C,MApEtC,CAuEGF","file":"css.js","sourcesContent":["(function(document) {\n    \"use strict\";\n\n    function definition(abstractHandler, functionResolveSourcemaps) {\n        var suffix = \".css\",\n            target = document.getElementsByTagName(\"head\")[0],\n            resolver = document.createElement(\"a\"),\n            regexMatchUrl = /url\\s*\\(\\s*[\"']?(.+?)[\"']?\\s*\\)/gi,\n            regexMatchImport = /@import\\s+[\"'](.+?)[\"']/gi,\n            regexIsAbsolutePath = /^\\//i,\n            regexIsAbsoluteUri = /^data:|http(s?):|\\/\\//i,\n            regexMatchType = /^text\\/css/;\n\n        function resolveUrl(url) {\n            resolver.href = url;\n            return resolver\n        }\n\n        function replaceUri(source, match, replacement) {\n            if (!regexIsAbsoluteUri.test(match[1])) {\n                source = source.replace(match[0], replacement)\n            }\n            return source\n        }\n\n        function HandlerCss() {}\n        HandlerCss.prototype = {\n            validate: function(type) {\n                return regexMatchType.test(type)\n            },\n            onPreRequest: function(dependency) {\n                var pathname = dependency.url.pathname;\n                dependency.url.pathname = pathname.slice(-suffix.length) !== suffix ? pathname + suffix : pathname\n            },\n            onPostRequest: function(dependency) {\n                var url = resolveUrl(dependency.url + \"/..\"),\n                    base = url.href,\n                    host = \"//\" + url.host,\n                    source = dependency.source,\n                    match;\n                while (match = regexMatchUrl.exec(source)) {\n                    source = replaceUri(source, match, 'url(\"' + resolveUrl(regexIsAbsolutePath.test(match[1]) ? host + match[1] : base + match[1]).href + '\")')\n                }\n                while (match = regexMatchImport.exec(source)) {\n                    source = replaceUri(source, match, '@import \"' + resolveUrl(regexIsAbsolutePath.test(match[1]) ? host + match[1] : base + match[1]).href + '\"')\n                }\n                dependency.source = functionResolveSourcemaps(dependency.url, source)\n            },\n            process: function(dependency) {\n                var element = document.querySelector('[demand-id=\"' + dependency.id + '\"]');\n                if (!element) {\n                    element = document.createElement(\"style\");\n                    element.type = \"text/css\";\n                    element.setAttribute(\"demand-id\", dependency.id);\n                    target.appendChild(element)\n                }\n                if (element.tagName === \"STYLE\") {\n                    if (element.styleSheet) {\n                        element.styleSheet.cssText = dependency.source\n                    } else {\n                        element.textContent = dependency.source\n                    }\n                }\n                provide(function() {\n                    return element\n                })\n            }\n        };\n        return new(HandlerCss.extends(abstractHandler))\n    }\n    provide([\"/demand/abstract/handler\", \"/demand/function/resolveSourcemaps\"], definition)\n})(document);"]}